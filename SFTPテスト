														
	処理フロー													
	①SFTP化 - S3copy処理													
		AWSCommon共通処理の修正（SFTP化対応で作成した共通コピー関数）												
		①	コマンドで新規ファイル or 新規クラスメソッド 呼び出し											
			メソッド											
				S3非同期コピー関数（引数①：SFTP化対応で作成した共通コピー関数内にあるコマンド文字列）										
					引数①		：	SFTP化対応で作成した共通関数コピー関数内にあるコマンド文字列						
														
		②	exec(①のphp Batch呼び出し) + 末尾に「> /dev/null &」を追加し非同期処理を行うようにする。											
			例	：	新規クラスメソッド作成							：	php 'include "MySamplephp"; MyClass::samlpe();' > /dev/null &	
				：	新規ファイル作成							：	php 'sample.php' > /dev/null &	
					※	「> /dev/null &」にてバックグラウンド（非同期）にて処理可能								
						詳細		：	＞					リダイレクト
								：	/dev/null &					結果を出力しない (戻り値なし)
														
	②非同期処理（新規で作成）　新規ファイル or 新規クラスメソッド作成													
		①	SFTP化対応でAWSCommonに用意していたAWSCommonのコピー処理をコピペする(処理まねる)											
			①-1		コマンド処理成功時									
					ファイルに、処理成功可否フラグ（成功）、業者名、処理回数、ファイル名、を書き込む									
			①-2		コマンド処理失敗時									
					ファイルに、処理成功可否フラグ（失敗）、業者名、処理回数、ファイル名、を書き込む									
														
		※	読み込み最後に達したらファイルの最後に判定の文字入れたい「end」等											
			→	これやる場合既存の各ファイルに修正入れることになりテストかさむので要相談										
														
	③exceSub処理													
		①	該当業者の動いているSFTPコピー処理がないか確認											
			コマンド			：	ps オプショn | grep 業者ID等　（設計中）							
			※	②で読み込み最後に達したらファイルの最後に判定の文字入れたい「end」等入れられない場合										
				リトライ処理を行い動いている処理ないか確認										
			①-1		該当業者の動いているSFTPコピー処理がある場合									
					ある程度のスリープ処理を加え再度コマンド実行									
					※	ループで該当業者のプロセス無くなるまでループ								
						時間上限値は作った方いいかも（念の為の無限ループ回避）								
														
		②	②で作成したファイルを1行毎に読み込み処理失敗していないか判定											
			②-1		処理失敗しているファイルがあった場合									
					②-1-1		ループ抜ける							
					②-1-2		異常終了とする（ここは既存の処理と合わせる。DB登録やメール送信等）							
			②-2		処理全て成功していた場合									
					次の処理へ進む									
														
	非同期処理													
			新規クラス ファイル or 新規クラスメソッド作成											
														
														
														
														
														
	exceSub S3copy処理終了確認処理													